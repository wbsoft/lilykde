#!/usr/bin/env python

"""
Try to run Frescobaldi immediately without installing.
Does not require CMake.
Checks the python version and modules.
If not Python 2.6 try to rerun ourselves with python 2.6.
Creates a local installdir (inside the frescobaldi-x.x.x directory).
Creates a menu in the local xdgdata-apps dir.
Records the current Okular textedit binding.
Adjusts some settings and directly runs Frescobaldi.
After having run this, users can run './frescobaldi' directly.
Calling python run or ./run again will display a dialog with options
to remove the Applications menu entry and restore the Okular binding.
"""

import itertools, os, re, subprocess, sys

def findExe(command):
    """
    Look up a command in the system PATH, and return an iterable
    across all places in the PATH the command is present
    """
    for p in os.environ.get("PATH", os.defpath).split(os.pathsep):
        path = os.path.join(p, command)
        if os.access(path, os.X_OK):
            yield path

def die(msg):
    try:
        KMessageBox.error(None, msg)
    except Exception:
        if os.environ.get('DISPLAY') and findExe('kdialog'):
            subprocess.call(['kdialog', '--error', msg])
        else:
            sys.stderr.write(msg+'\n')
    sys.exit(1)

# Python must be 2.6
if sys.version_info[:2] != (2, 6):
    # find Python 2.6
    for path in itertools.chain(findExe('python2.6'), findExe('python'), findExe('python26')):
        ver = subprocess.Popen([path, "--version"], stderr=subprocess.PIPE).communicate()[1]
        if ' 2.6' in ver:
            os.execl(path, path, sys.argv[0])
    die("Could not find Python 2.6.\n\n"
        "Please install the 2.6 version of Python.")

# find out our directory
curdir = os.path.dirname(os.path.abspath(sys.argv[0]))
os.chdir(curdir)
sys.path.insert(0, curdir)

try:
    import sip
    sip.setapi("QString", 2)
    sip.setapi("QVariant", 2)
except Exception:
    die("Please install the Python-SIP module.\nCan't set the sip API.")

# check modules
import checkmodules
missing = checkmodules.checkModules()
if missing:
    die("The following Python modules are missing: %s.\n\n"
        "Please install them and try again." % ", ".join(missing))

# check versions
versions = checkmodules.checkVersions()
if versions:
    die("Some packages have outdated versions:\n\n" + "\n".join(versions))

# Everything look OK!

import sip
sip.setapi("QString", 2)
sip.setapi("QVariant", 2)

# Construct KApplication

import shutil

from PyKDE4.kdecore import KAboutData, KCmdLineArgs, KGlobal, ki18n
from PyKDE4.kdeui import KApplication, KDialog

aboutData = KAboutData(
    'frescobaldi_runner',       # appName
    'frescobaldi_runner',       # catalogName
    ki18n('Frescobaldi Runner'),# programName
    '1.0'                       # version
    )

KCmdLineArgs.init(sys.argv, aboutData)
app = KApplication()

# set some directories/values
data = {}

m = re.search(r'set\(VERSION\s+"(.*?)"', open('CMakeLists.txt').read())
if not m:
    die("Internal error: could not determine version from CMakeLists.txt")

data['VERSION'] = m.group(1)
data['MODULE_DIR'] = os.path.join(curdir, "python")
data['PYTHON_EXECUTABLE'] = sys.executable
data['CMAKE_INSTALL_PREFIX'] = os.path.join(curdir, 'image')
data['APP_DIR'] = os.path.join(curdir, 'image', 'share', 'apps', 'frescobaldi')


def configure_file(infile, outfile, dictionary):
    with open(outfile, 'w') as f:
        f.write(re.sub(r'@([A-Z]+(_[A-Z]+)*)@',
            lambda m: data[m.group(1)], open(infile).read()))


icon_install_dir = KGlobal.dirs().saveLocation('icon', 'hicolor/scalable/apps/')
html_install_dir = KGlobal.dirs().saveLocation('html', 'en/')
xdgdata_apps_install_dir = KGlobal.dirs().saveLocation('xdgdata-apps')

# some shortcuts
app_dir = data['APP_DIR']
desktop_file = os.path.join(xdgdata_apps_install_dir, 'frescobaldi.desktop')


class TarBall(object):
    """Instantiated when we are in a Frescobaldi release tar ball."""
    
    def makeImage(self):
        # puts some files under image/share/ ...
        os.makedirs(app_dir)
        
        for name in ('frescobaldiui.rc', 'expansions', 'lilydoc.css'):
            os.symlink(os.path.join(curdir, 'data', name), os.path.join(app_dir, name))
        
        for name in ('rumor', 'icons'):
            os.symlink(os.path.join(curdir, name), os.path.join(app_dir, name))
        
        # pics
        os.symlink(os.path.join(curdir, 'prebuilt', 'pics'), os.path.join(app_dir, 'pics'))
        
        
    def installFrescobaldi(self):
        # create the frescobaldi 'binary'
        configure_file('frescobaldi.py', 'frescobaldi', data)
        os.chmod('frescobaldi', 0o744)
        
        # put appIcon in icondir
        shutil.copy(
            os.path.join('data', 'frescobaldi-lily.svgz'),
            os.path.join(icon_install_dir, 'frescobaldi.svgz'))
        
        # install desktop file
        desktop = open(os.path.join('data', 'frescobaldi.desktop')).read()
        newdesktop = re.sub(r'\bExec=frescobaldi\b', 'Exec=%s/frescobaldi' % curdir, desktop)
        with open(desktop_file, 'w') as f:
            f.write(newdesktop)

        # install link to documentation
        os.symlink(os.path.join(curdir, 'doc'), os.path.join(html_install_dir, 'frescobaldi'))
        
        # TODO: mo files
        
        
    def removeFrescobaldi(self):
        # remove the frescobaldi 'binary'
        os.remove('frescobaldi')
        
        # remove appIcon
        os.remove(os.path.join(icon_install_dir, 'frescobaldi.svgz'))
        
        # remove desktop file
        os.remove(desktop_file)
        
        # remove link to documentation
        os.remove(os.path.join(html_install_dir, 'frescobaldi'))
        
        # TODO: mo files

